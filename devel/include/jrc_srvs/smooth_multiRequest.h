// Generated by gencpp from file jrc_srvs/smooth_multiRequest.msg
// DO NOT EDIT!


#ifndef JRC_SRVS_MESSAGE_SMOOTH_MULTIREQUEST_H
#define JRC_SRVS_MESSAGE_SMOOTH_MULTIREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jrc_srvs
{
template <class ContainerAllocator>
struct smooth_multiRequest_
{
  typedef smooth_multiRequest_<ContainerAllocator> Type;

  smooth_multiRequest_()
    : x_multi()
    , y_multi()
    , theta_multi()  {
    }
  smooth_multiRequest_(const ContainerAllocator& _alloc)
    : x_multi(_alloc)
    , y_multi(_alloc)
    , theta_multi(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_multi_type;
  _x_multi_type x_multi;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_multi_type;
  _y_multi_type y_multi;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _theta_multi_type;
  _theta_multi_type theta_multi;





  typedef boost::shared_ptr< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> const> ConstPtr;

}; // struct smooth_multiRequest_

typedef ::jrc_srvs::smooth_multiRequest_<std::allocator<void> > smooth_multiRequest;

typedef boost::shared_ptr< ::jrc_srvs::smooth_multiRequest > smooth_multiRequestPtr;
typedef boost::shared_ptr< ::jrc_srvs::smooth_multiRequest const> smooth_multiRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jrc_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a44a93c68be40826e47223eda039e9c";
  }

  static const char* value(const ::jrc_srvs::smooth_multiRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a44a93c68be4082ULL;
  static const uint64_t static_value2 = 0x6e47223eda039e9cULL;
};

template<class ContainerAllocator>
struct DataType< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jrc_srvs/smooth_multiRequest";
  }

  static const char* value(const ::jrc_srvs::smooth_multiRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] x_multi\n\
float64[] y_multi\n\
float64[] theta_multi\n\
";
  }

  static const char* value(const ::jrc_srvs::smooth_multiRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_multi);
      stream.next(m.y_multi);
      stream.next(m.theta_multi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct smooth_multiRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jrc_srvs::smooth_multiRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jrc_srvs::smooth_multiRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_multi[]" << std::endl;
    for (size_t i = 0; i < v.x_multi.size(); ++i)
    {
      s << indent << "  x_multi[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_multi[i]);
    }
    s << indent << "y_multi[]" << std::endl;
    for (size_t i = 0; i < v.y_multi.size(); ++i)
    {
      s << indent << "  y_multi[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_multi[i]);
    }
    s << indent << "theta_multi[]" << std::endl;
    for (size_t i = 0; i < v.theta_multi.size(); ++i)
    {
      s << indent << "  theta_multi[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.theta_multi[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JRC_SRVS_MESSAGE_SMOOTH_MULTIREQUEST_H
